#!/usr/bin/env bash

set -euETo pipefail
shopt -s inherit_errexit

WIFI_DEVICE=
WIFI_SSID=
WIFI_PASSWORD=
PARTITION=1
FORMAT=1
MOUNT=1
PACSTRAP=1

packages=(
    base
    linux-hardened
    linux-firmware
    booster
    sbsigntools
    lvm2
    openssh
    git
    iwd
    efibootmgr
    binutils
    neovim
)
chroot_args=()

case "$(lscpu | grep '^Model name:' | awk -F'  +' '{ print $2 }' | awk '{ print $1 }')" in
	AMD)
	packages+=(amd-ucode)
	chroot_args+=(--microcode 'amd-ucode.img')
	;;		
	*)
	echo "Unknown arch: $1"
	exit 1
	;;
esac

while [[ $# -gt 0 ]]; do
	case $1 in
		--wifi-device)
		WIFI_DEVICE=$2
		shift
		shift
		;;		
		--wifi-ssid)
		WIFI_SSID=$2
		shift
		shift
		;;		
		--wifi-pass)
		WIFI__PASSWORD=$2
		shift
		shift
		;;
		--nopartition)
		PARTITION=0
		shift
		;;
		--noformat)
		FORMAT=0
		shift
		;;
		--nomount)
		MOUNT=0
		shift
		;;
		--nopacstrap)
		PACSTRAP=0
		shift
		;;
		--nosysconfig|--noinitramfs|--nobootloader)
		chroot_args+=("$1")
		shift
		;;
		*)
		echo "Unknown option: $1"
		exit 1
		;;
	esac
	
done

echo "==> checking EUFI64"

if [[ "$(cat /sys/firmware/efi/fw_platform_size)" == 64 ]]; then
  echo "success"
else
  echo "This script only supports EUFI64 systems, exiting."
  exit 1
fi
echo "==> checking EUFI64 vars"
if [[ "$(efivar --list | wc -l)" -ne 0 ]]; then
	echo "var accessable!"
else
	echo "vars not accessable!"
	exit 1
fi

echo "=> checking network..."

connect() {
  while :; do
    if dig @9.9.9.9 archlinux.org > /dev/null; then
      return
    fi

    mapfile -t wifi_devices < <(iwctl device list | awk '($4=="on" && $6 == "station") {print $2}')

    if [[ ${#wifi_devices[@]} -eq 0 ]]; then
      echo "network not detected and no wireless adapters found"
      exit 1
    fi
          
    if [[ -z $WIFI_DEVICE ]] || [[ ! " ${wifi_devices[*]} " =~ " $WIFI_DEVICE " ]]; then
	    # TODO change IFS to awk flag
	    ( IFS=$'\n'; echo "${wifi_devices[*]}" | awk '{print NR-1 ") " $0}' )
      # for idx in "${!wifi_devices[@]}"; do
      #   echo "$idx) ${wifi_devices[$idx]}"
      # done
      read -rp "Pick an device: " idx
      if [[ ! $idx =~ ^[0-9]+$ ]]; then
        continue
      fi
      if (( $idx < 0 || $idx >= ${#wifi_devices[@]} )); then
        continue
      fi
      WIFI_DEVICE=${wifi_devices[$idx]}
      break
    fi
    break
  done

  while :; do
    if dig @9.9.9.9 archlinux.org > /dev/null; then
      return
    fi

    iwctl station $WIFI_DEVICE scan
    mapfile -t wifi_networks < <(iwctl station $WIFI_DEVICE get-networks)

    # takes (4,-2) as the options
    wifi_ssids=("${wifi_networks[@]: 4:$((${#wifi_networks[@]}-5))}")

    if [[ ${#wifi_ssids[@]} -eq 0 ]]; then
      echo "no wifi ssids found with $WIFI_DEVICE"
      exit 1
    fi

    if [[ -z $WIFI_SSID ]] || [[ ! " ${wifi_ssids[*]} " =~ " $WIFI_SSID " ]]; then
      printf '%s\n' "${wifi_networks[@]:0:4}" 
      echo -en "\033[0m"
      ( IFS=$'\n'; echo "${wifi_ssids[*]}" | sed 's/\x1B\[[0-9;]*m//g' | awk '{printf "%-4s", NR-1")";gsub(/^..../,"")}1' )
      read -rp "Pick a network: " idx
      if [[ ! $idx =~ ^[0-9]+$ ]]; then
        continue
      fi
      if (( $idx < 0 || $idx >= ${#wifi_ssids[@]} )); then
        continue
      fi
      echo $(echo "!!"${wifi_ssids[$idx]})
      # TODO no echo
      WIFI_SSID=$(awk -F'  +' '{ print $2 }' <<< "${wifi_ssids[$idx]}")
      break
    fi
   break
   done
   echo "'$WIFI_DEVICE' '$WIFI_SSID'"
   iwctl station "$WIFI_DEVICE" connect "$WIFI_SSID"
   sleep 2
}

connect

if dig @9.9.9.9 archlinux.org > /dev/null; then
	echo "online"
else
	echo "No network connectivity, exiting."
	exit 1
fi

# TODO 1.8
timedatectl

# TODO 1.9
echo "=> preparing install disk..."
# TODO link list scsi/nvme
mapfile -t disks < <(lsblk -dpno name -I 8,259)
awk -vOFS='\n' '{print NR-1 ") " $1}' <<< $(printf '%s\n' "${disks[@]}")
read -rp "Pick an install disk: " idx
disk="${disks[$idx]}"
if [[ "$PARTITION" -eq 1 ]]; then
	set -x
	echo "partitioning disk $disk"
	# TODO make select box
	best_lbaf="$(set +o pipefail && nvme id-ns -H $disk | grep 'Relative Performance: .*Best' | grep -v 'in use' | awk '{ print $3 }')"
	if [[ -n $best_lbaf ]]; then
		echo "do the thing $best_lbaf"
		# nvme format --lbaf=1 /dev/nvme0n1
	fi
	echo "!!$best_lbaf"
	parted -a optimal -s "$disk" -- \
		mklabel gpt \
		mkpart primary fat32 0% 2048MB \
		set 1 esp on \
		mkpart primary ext4 2048MB 100%
	if [[ "$(parted "$disk" align-check optimal 1)" != "1 aligned" ]]; then
		echo "part 1 not aligned"
	elif [[ "$(parted "$disk" align-check optimal 2)" != "2 aligned" ]]; then
		echo "part 2 not aligned"
	fi
	echo "drives partitioned"
else
	echo "formatting skipped"
fi
chroot_args+=(--root-disk "${disk}p2")
if [[ "$FORMAT" -eq 1 ]]; then
	echo "formatting disk ${disk}p1"
	mkfs.fat -F 32 ${disk}p1
	echo "formatting disk ${disk}p2"
	cryptsetup -y -v luksFormat ${disk}p2
	cryptsetup open ${disk}p2 cryptlvm
	pvcreate /dev/mapper/cryptlvm
	vgcreate SystemVolGroup /dev/mapper/cryptlvm
	lvcreate -l 100%FREE SystemVolGroup -n root
	lvreduce -L -256MB SystemVolGroup/root
	mkfs.ext4 /dev/SystemVolGroup/root
	# cryptsetup remove /dev/mapper/cryptlvm if failures
fi

if [[ "$MOUNT" -eq 1 ]]; then
	echo "blah"
	mount --mkdir /dev/SystemVolGroup/root /mnt
	mount --mkdir -o uid=0,gid=0,fmask=0077,dmask=0077 ${disk}p1 /mnt/boot
fi

if [[ "$PACSTRAP" -eq 1 ]]; then
	pacstrap -K /mnt "${packages[@]}"
fi

genfstab -U /mnt >> /mnt/etc/fstab
#cat /mnt/etc/fstab # review
cp "$(dirname "$0")"/chroot-install /mnt/root
printf "%s \n" "${chroot_args[@]}"
arch-chroot /mnt /root/chroot-install "${chroot_args[@]}"

# TODO e2scrub
# TODO SWAP








