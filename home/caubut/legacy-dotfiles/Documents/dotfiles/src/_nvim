#!/usr/bin/env bash

NVIM="$HOME/.local/bin/nvim"

install-nvim() {
	{
		set -x
		curl -Lo "$NVIM" https://github.com/neovim/neovim/releases/latest/download/nvim.appimage || true
		chmod u+x "$NVIM"
	}
	print-info "===> updating desktop shortcut\n"
	{
		set -x
		# mount app image
		rm -f /tmp/fifo || true
		mkfifo /tmp/fifo
		exec 3<>/tmp/fifo
		$NVIM --appimage-mount >&3 &
		NVIM_MOUNT_PID=$!
		# handle clean up on error
		trap 'kill "$NVIM_MOUNT_PID"; exec 3>&-; rm -f /tmp/fifo' ERR
		read -r NVIM_MOUNT_DIR <&3
		# update icon
		{
			set +x && print-info "====> updating nvim.png\n"
		}
		mkdir -p "$HOME/.local/share/icons"
		cp "$NVIM_MOUNT_DIR/nvim.png" "$HOME/.local/share/icons/"
		# update desktop shortcut
		{
			set +x && print-info "====> updating nvim.desktop\n"
		}
		mkdir -p "$HOME/.local/share/applications/"
		sed \
			-e "s@^TryExec=.*@TryExec=$NVIM@" \
			-e "s@^Exec=.*@Exec=$NVIM %F@" \
			-e "s@^Icon=.*@Icon=$HOME/.local/share/icons/nvim.png@" \
			<"$NVIM_MOUNT_DIR/nvim.desktop" \
			>"$HOME/.local/share/applications/nvim.desktop"
		# clean up
		{
			set +x && print-info "====> cleaning up\n"
		}
		kill "$NVIM_MOUNT_PID"
		trap - ERR
		exec 3>&-
		rm /tmp/fifo
	}
}

declare -a COC_EXTENSIONS=(
	coc-json
	coc-pyright
	coc-tsserver
)

update-nvim() {
	if [[ -f "$NVIM" ]]; then
		print-info "==> installing\n"
		install-nvim
	elif [[ "$(date -r "$NVIM" +%s)" -le "$(date -d "yesterday" +%s)" ]]; then
		print-info "==> upgrading\n"
		install-nvim
	fi

	# {
	#   if [ ! -f "$HOME/.local/share/nvim/site/autoload/plug.vim" ]; then
	#     print-info "==> installing vim-plug\n"
	#     {
	#       set -x
	#       curl -fLo "$HOME/.local/share/nvim/site/autoload/plug.vim" \
	#         --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
	#     }
	#   else
	#     print-info "==> updating vim-plug\n"
	#     {
	#       set -x
	#       $NVIM -es -u "$HOME/.config/nvim/init.vim" -i NONE -c "PlugUpgrade" -c "qa"
	#     }
	#   fi

	#   print-info "===> updating plugins\n"
	#   {
	#     set -x
	#     $NVIM -es -u "$HOME/.config/nvim/init.vim" -i NONE -c "PlugUpdate" -c "qa"
	#   }

	#   print-info "===> installing coc extensions\n"
	#   {
	#     nvim +"CocInstall -sync ${COC_EXTENSIONS[*]}" +qall

	#     # set -x
	#     # mkdir -p "$HOME/.config/coc/extensions"
	#     # cd "$HOME/.config/coc/extensions" || exit 1
	#     # if [ ! -f package.json ]
	#     # then
	#     #   echo '{"dependencies":{}}'> package.json
	#     # fi
	#     # npm install "${COC_EXTENSIONS[@]}" \
	#     #   --install-strategy=shallow \
	#     #   --ignore-scripts \
	#     #   --no-bin-links \
	#     #   --no-package-lock \
	#     #   --omit=dev
	#   }

	#   print-info "===> updating coc extensions\n"
	#   {
	#     set -x
	#     $NVIM -es -u "$HOME/.config/nvim/init.vim" -i NONE -c "CocUpdateSync" -c "qa"
	#   }
	# }
}

run-module false x86_64

# # define command which will be used when "nvim" is set as a merge tool
# [mergetool "nvim"]
#   cmd = nvim -f -c \"Gdiffsplit!\" \"$MERGED\"
# # set "nvim" as tool for merging
# [merge]
#   tool = nvim
# # automatically launch merge tool without displaying a prompt
# [mergetool]
#   prompt = false
